/*
*   By Htto 2023 1-20

*   The source code(.cpp) is generated by HLex
*/

#pragma once

#include <string>
#include <vector>

namespace HLex
{
    struct Token
    {
        std::string tag;
        std::string val;
        std::string to_string() const
        {
            return "<" + tag + "," + val + ">";
        }
    };
    struct Scanner
    {
        std::vector<Token> data;
        int pos = 0;

        int cur_line_no() { return line_no; }
        std::string cur_tag() { return get_cur_token().tag; }
        Token get_cur_token()
        {
            skip();
            if (pos >= data.size())
                throw std::runtime_error("Scanner::get_cur_token(): reached to the end!");
            return data[pos];
        }

        void match(const std::string &tag)
        {
            skip();
            if (pos >= data.size() || data[pos].tag != tag)
                throw std::runtime_error("Scanner::match(string): Line " + std::to_string(line_no) + " expect " + tag);
            pos++;
        }
        void next()
        {
            skip();
            pos++;
        }
        bool is_end() { return pos >= data.size(); }
        void skip()
        {
            while (pos < data.size() && data[pos].tag == "newline")
                pos++, line_no++;
        }
        void print()
        {
            for (int line_no = 1; auto tok : data)
            {
                if (tok.tag == "newline")
                    std::cout << "\n";
                else
                    std::cout << tok.to_string();
            }
        }

    private:
        int line_no = 1;
    };
    std::string read_file(const std::string &filename);
    Scanner scanner(const std::string &str);
}