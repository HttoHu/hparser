#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <fstream>
#include "../includes/scanner.h"
namespace HLex
{
    using std::map;
    using std::vector;
    using char_type = char;
    void print_line(const std::string &s, int &pos)
    {
        int cnt = 100;
        while (pos < s.size() && cnt)
        {
            std::cout << s[pos++];
            cnt--;
        }
        std::cout.flush();
    }
    class Lexer
    {
    public:
        Lexer(const std::string &con);
        std::vector<Token> lex()
        {
            std::vector<Token> ret;
            int cur_state = entry;
            // to roll back state tag val
            std::vector<std::pair<int, Token>> pos_stac;
            // str pos
            int pos = 0;
            std::string cur_token;
            std::string cur_tag;

            while (pos < content.size())
            {
                if (tab[cur_state].count(content[pos]))
                {
                    cur_state = tab[cur_state][content[pos]];
                    cur_token += content[pos];

                    if (fin_stat_tab.count(cur_state))
                    {
                        if (fin_stat_tab[cur_state] != "")
                            cur_tag = fin_stat_tab[cur_state];

                        pos_stac.clear();
                        pos_stac.push_back({pos + 1, {cur_tag, cur_token}});
                    }
                    pos++;
                }
                else
                {
                    if (pos_stac.empty())
                    {
                        print_line(content, pos);
                        throw std::runtime_error(" LexerGenerator::lex: Lexer Error");
                    }
                    auto [p, tok] = pos_stac.back();
                    // if a symbol is a keyword pr ignore
                    auto val = tok.val;
                    if (keywords.count(val))
                        tok = Token{keywords[val], val};
                    if (user_defs.count(tok.tag))
                    {
                        p -= tok.val.size();
                        tok.val = user_defs[tok.tag](content, p);
                    }
                    if (!ignore.count(tok.tag))
                        ret.push_back(tok);

                    // roll back
                    pos = p;
                    cur_state = entry;
                    cur_token = cur_tag = "";
                    pos_stac.clear();
                }
            }
            if (pos_stac.size())
                ret.push_back(pos_stac.back().second);
            return ret;
        }

    private:
        std::string content;
        int pos = 0;

        std::map<std::string, std::string> keywords;
        std::map<std::string, std::function<std::string(const std::string &, int &)>> user_defs;
        std::set<std::string> ignore;

        int entry;
        map<int, std::string> fin_stat_tab;
        vector<map<char_type, int>> tab;
    };

    std::string read_file(const std::string &filename)
    {
        std::ifstream ifs(filename, std::ios::in | std::ios::binary);
        if (!ifs)
            throw std::runtime_error("open file " + filename + " failed\n");
        char *file_content;
        ifs.seekg(0, std::ios::end);
        size_t file_length = ifs.tellg();
        ifs.seekg(0, std::ios::beg);

        file_content = new char[file_length];

        ifs.read(file_content, file_length);
        ifs.close();

        std::string str(file_content, file_content + file_length);
        delete[] file_content;
        return str;
    }
}
// Following code is generated by program
namespace HLex
{
    Lexer::Lexer(const std::string &con) : content(con), entry(8)
    {
        fin_stat_tab = {{1, "colon"}, {2, "newline"}, {3, "nterminal"}, {4, "or"}, {5, "semi"}, {6, "space"}, {7, "terminal"}};
        tab = {{{'0', 12}, {'1', 12}, {'2', 12}, {'3', 12}, {'4', 12}, {'5', 12}, {'6', 12}, {'7', 12}, {'8', 12}, {'9', 12}, {'A', 12}, {'B', 12}, {'C', 12}, {'D', 12}, {'E', 12}, {'F', 12}, {'G', 12}, {'H', 12}, {'I', 12}, {'J', 12}, {'K', 12}, {'L', 12}, {'M', 12}, {'N', 12}, {'O', 12}, {'P', 12}, {'Q', 12}, {'R', 12}, {'S', 12}, {'T', 12}, {'U', 12}, {'V', 12}, {'W', 12}, {'X', 12}, {'Y', 12}, {'Z', 12}, {'a', 12}, {'b', 12}, {'c', 12}, {'d', 12}, {'e', 12}, {'f', 12}, {'g', 12}, {'h', 12}, {'i', 12}, {'j', 12}, {'k', 12}, {'l', 12}, {'m', 12}, {'n', 12}, {'o', 12}, {'p', 12}, {'q', 12}, {'r', 12}, {'s', 12}, {'t', 12}, {'u', 12}, {'v', 12}, {'w', 12}, {'x', 12}, {'y', 12}, {'z', 12}}, {}, {}, {}, {}, {}, {}, {}, {{'\t', 6}, {'\n', 2}, {'\r', 9}, {' ', 6}, {':', 1}, {';', 5}, {'<', 11}, {'[', 0}, {'|', 4}}, {{'\n', 2}}, {{'0', 10}, {'1', 10}, {'2', 10}, {'3', 10}, {'4', 10}, {'5', 10}, {'6', 10}, {'7', 10}, {'8', 10}, {'9', 10}, {'>', 7}, {'A', 10}, {'B', 10}, {'C', 10}, {'D', 10}, {'E', 10}, {'F', 10}, {'G', 10}, {'H', 10}, {'I', 10}, {'J', 10}, {'K', 10}, {'L', 10}, {'M', 10}, {'N', 10}, {'O', 10}, {'P', 10}, {'Q', 10}, {'R', 10}, {'S', 10}, {'T', 10}, {'U', 10}, {'V', 10}, {'W', 10}, {'X', 10}, {'Y', 10}, {'Z', 10}, {'a', 10}, {'b', 10}, {'c', 10}, {'d', 10}, {'e', 10}, {'f', 10}, {'g', 10}, {'h', 10}, {'i', 10}, {'j', 10}, {'k', 10}, {'l', 10}, {'m', 10}, {'n', 10}, {'o', 10}, {'p', 10}, {'q', 10}, {'r', 10}, {'s', 10}, {'t', 10}, {'u', 10}, {'v', 10}, {'w', 10}, {'x', 10}, {'y', 10}, {'z', 10}}, {{'0', 10}, {'1', 10}, {'2', 10}, {'3', 10}, {'4', 10}, {'5', 10}, {'6', 10}, {'7', 10}, {'8', 10}, {'9', 10}, {'A', 10}, {'B', 10}, {'C', 10}, {'D', 10}, {'E', 10}, {'F', 10}, {'G', 10}, {'H', 10}, {'I', 10}, {'J', 10}, {'K', 10}, {'L', 10}, {'M', 10}, {'N', 10}, {'O', 10}, {'P', 10}, {'Q', 10}, {'R', 10}, {'S', 10}, {'T', 10}, {'U', 10}, {'V', 10}, {'W', 10}, {'X', 10}, {'Y', 10}, {'Z', 10}, {'a', 10}, {'b', 10}, {'c', 10}, {'d', 10}, {'e', 10}, {'f', 10}, {'g', 10}, {'h', 10}, {'i', 10}, {'j', 10}, {'k', 10}, {'l', 10}, {'m', 10}, {'n', 10}, {'o', 10}, {'p', 10}, {'q', 10}, {'r', 10}, {'s', 10}, {'t', 10}, {'u', 10}, {'v', 10}, {'w', 10}, {'x', 10}, {'y', 10}, {'z', 10}}, {{'0', 12}, {'1', 12}, {'2', 12}, {'3', 12}, {'4', 12}, {'5', 12}, {'6', 12}, {'7', 12}, {'8', 12}, {'9', 12}, {'A', 12}, {'B', 12}, {'C', 12}, {'D', 12}, {'E', 12}, {'F', 12}, {'G', 12}, {'H', 12}, {'I', 12}, {'J', 12}, {'K', 12}, {'L', 12}, {'M', 12}, {'N', 12}, {'O', 12}, {'P', 12}, {'Q', 12}, {'R', 12}, {'S', 12}, {'T', 12}, {'U', 12}, {'V', 12}, {'W', 12}, {'X', 12}, {'Y', 12}, {'Z', 12}, {']', 3}, {'a', 12}, {'b', 12}, {'c', 12}, {'d', 12}, {'e', 12}, {'f', 12}, {'g', 12}, {'h', 12}, {'i', 12}, {'j', 12}, {'k', 12}, {'l', 12}, {'m', 12}, {'n', 12}, {'o', 12}, {'p', 12}, {'q', 12}, {'r', 12}, {'s', 12}, {'t', 12}, {'u', 12}, {'v', 12}, {'w', 12}, {'x', 12}, {'y', 12}, {'z', 12}}};
        ignore = {"space"};
        keywords = {};
        user_defs = {};
    }
    Scanner scanner(const std::string &str)
    {
        Lexer L(str);
        Scanner ret;
        ret.data = L.lex();
        return ret;
    }
}